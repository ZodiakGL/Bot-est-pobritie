package org.example;

import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberAdministrator;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberOwner;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

public class PermissionChecker {
    private final AbsSender bot;

    public PermissionChecker(AbsSender bot) {
        this.bot = bot;
    }

    public boolean isGroupChat(Chat chat) {
        return chat.isGroupChat() || chat.isSuperGroupChat();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public boolean canUserBanMembers(Long chatId, Long userId) {
        try {
            System.out.println("üîç Checking ban permissions for user: " + userId + " in chat: " + chatId);

            ChatMember member = getChatMember(chatId, userId);

            // –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—Å–µ
            if (member instanceof ChatMemberOwner) {
                System.out.println("‚úÖ User is OWNER - can ban");
                return true;
            }

            // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ ban users
            if (member instanceof ChatMemberAdministrator) {
                ChatMemberAdministrator admin = (ChatMemberAdministrator) member;
                boolean canRestrict = admin.getCanRestrictMembers();
                System.out.println("üë§ User is ADMIN - canRestrictMembers: " + canRestrict);

                // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                System.out.println("üìã Admin rights details:");
                System.out.println("   - canRestrictMembers: " + admin.getCanRestrictMembers());
                System.out.println("   - canDeleteMessages: " + admin.getCanDeleteMessages());
                System.out.println("   - canInviteUsers: " + admin.getCanInviteUsers());
                System.out.println("   - canPinMessages: " + admin.getCanPinMessages());
                System.out.println("   - canPromoteMembers: " + admin.getCanPromoteMembers());

                return canRestrict;
            }

            // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å
            System.out.println("‚ùå User is REGULAR USER - cannot ban");
            return false;

        } catch (TelegramApiException e) {
            System.out.println("‚ùå Error checking user permissions: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public boolean canBotRestrictMembers(Long chatId) {
        try {
            String botId = bot.getMe().getId().toString();
            System.out.println("ü§ñ Checking bot permissions, bot ID: " + botId);

            ChatMember botMember = getChatMember(chatId, Long.valueOf(botId));

            if (botMember instanceof ChatMemberAdministrator) {
                ChatMemberAdministrator admin = (ChatMemberAdministrator) botMember;
                boolean canRestrict = admin.getCanRestrictMembers();
                System.out.println("ü§ñ Bot is ADMIN - canRestrictMembers: " + canRestrict);
                return canRestrict;
            }

            System.out.println("‚ùå Bot is NOT ADMIN or cannot restrict members");
            return false;
        } catch (TelegramApiException e) {
            System.out.println("‚ùå Error checking bot permissions: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –∑–∞–º—å—é—á–µ–Ω
     */
    public boolean canUserBeMuted(Long chatId, Long userId) {
        try {
            System.out.println("üîç Checking if user can be muted: " + userId);

            ChatMember member = getChatMember(chatId, userId);

            boolean canBeMuted = !(member instanceof ChatMemberOwner || member instanceof ChatMemberAdministrator);
            System.out.println("üë§ User can be muted: " + canBeMuted);

            return canBeMuted;

        } catch (TelegramApiException e) {
            System.out.println("‚ùå Error checking if user can be muted: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞
     */
    public ChatMember getChatMember(Long chatId, Long userId) throws TelegramApiException {
        GetChatMember getChatMember = new GetChatMember();
        getChatMember.setChatId(chatId.toString());
        getChatMember.setUserId(userId);
        return bot.execute(getChatMember);
    }

    /**
     * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –º—É—Ç–æ–º
     */
    public PermissionCheckResult checkMutePermissions(Long chatId, Long executorUserId, Long targetUserId) {
        System.out.println("üöÄ Starting permission check for mute:");
        System.out.println("   Executor: " + executorUserId);
        System.out.println("   Target: " + targetUserId);
        System.out.println("   Chat: " + chatId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - –º–æ–∂–µ—Ç –ª–∏ –æ–Ω –±–∞–Ω–∏—Ç—å
        boolean executorCanBan = canUserBanMembers(chatId, executorUserId);
        System.out.println("üéØ Executor can ban: " + executorCanBan);

        if (!executorCanBan) {
            return PermissionCheckResult.noPermission("‚ùå –¢—ã —á–æ –∏–Ω–¥–µ–µ—Ü, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        boolean botCanRestrict = canBotRestrictMembers(chatId);
        System.out.println("üéØ Bot can restrict: " + botCanRestrict);

        if (!botCanRestrict) {
            return PermissionCheckResult.noPermission(
                    "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n" +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 'Ban users'"
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü
        boolean targetCanBeMuted = canUserBeMuted(chatId, targetUserId);
        System.out.println("üéØ Target can be muted: " + targetCanBeMuted);

        if (!targetCanBeMuted) {
            return PermissionCheckResult.noPermission("‚ùå –¢—ã —á–æ –±–ª–∏–Ω–æ–≤ –æ–±—ä–µ–ª—Å—è? –ê–¥–º–∏–Ω–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è –º—É—Ç–∏—Ç—å!");
        }

        System.out.println("‚úÖ All permissions check passed!");
        return PermissionCheckResult.success();
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public String getUserRoleInfo(Long chatId, Long userId) {
        try {
            ChatMember member = getChatMember(chatId, userId);

            if (member instanceof ChatMemberOwner) {
                return "üëë –í–ª–∞–¥–µ–ª–µ—Ü (–º–æ–∂–µ—Ç –≤—Å–µ)";
            } else if (member instanceof ChatMemberAdministrator) {
                ChatMemberAdministrator admin = (ChatMemberAdministrator) member;
                return String.format(
                        "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n" +
                                "   ‚Ä¢ –ú–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å: %s\n" +
                                "   ‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n" +
                                "   ‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å: %s\n" +
                                "   ‚Ä¢ –ú–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å: %s\n" +
                                "   ‚Ä¢ –ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤: %s",
                        admin.getCanRestrictMembers() ? "‚úÖ" : "‚ùå",
                        admin.getCanDeleteMessages() ? "‚úÖ" : "‚ùå",
                        admin.getCanInviteUsers() ? "‚úÖ" : "‚ùå",
                        admin.getCanPinMessages() ? "‚úÖ" : "‚ùå",
                        admin.getCanPromoteMembers() ? "‚úÖ" : "‚ùå"
                );
            } else {
                return "üôÇ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            }

        } catch (TelegramApiException e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage();
        }
    }
}